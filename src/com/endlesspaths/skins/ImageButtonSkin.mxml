<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

	   @see spark.components.Button
		
	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" alpha.disabled="0.5">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		 * @copy spark.skins.spark.ApplicationSkin#hostComponent
		 */
		[HostComponent("com.endlesspaths.components.ImageButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			static private const exclusions:Array = ["labelDisplay", "imageDisplay"];
			
			override public function get colorizeExclusions():Array {return exclusions;}
			
			override protected function initializationComplete():void {
				useChromeColor = true;
				super.initializationComplete();
			}
			
			protected function gr_creationComplete(evt:FlexEvent):void {
				img.source = hostComponent.image;
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				shadow.topLeftRadiusX = hostComponent.radiusLeft;
				shadow.bottomLeftRadiusX = hostComponent.radiusLeft;
				fill.topLeftRadiusX = hostComponent.radiusLeft;
				fill.bottomLeftRadiusX = hostComponent.radiusLeft;
				lowlight.topLeftRadiusX = hostComponent.radiusLeft;
				lowlight.bottomLeftRadiusX = hostComponent.radiusLeft;
				highlight.topLeftRadiusX = hostComponent.radiusLeft;
				highlight.bottomLeftRadiusX = hostComponent.radiusLeft;
				border.topLeftRadiusX = hostComponent.radiusLeft;
				border.bottomLeftRadiusX = hostComponent.radiusLeft;
				
				shadow.topRightRadiusX = hostComponent.radiusRight;
				shadow.bottomRightRadiusX = hostComponent.radiusRight;
				fill.topRightRadiusX = hostComponent.radiusRight;
				fill.bottomRightRadiusX = hostComponent.radiusRight;
				lowlight.topRightRadiusX = hostComponent.radiusRight;
				lowlight.bottomRightRadiusX = hostComponent.radiusRight;
				highlight.topRightRadiusX = hostComponent.radiusRight;
				highlight.bottomRightRadiusX = hostComponent.radiusRight;
				border.topRightRadiusX = hostComponent.radiusRight;
				border.bottomRightRadiusX = hostComponent.radiusRight;
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>		   
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<!-- layer 1: shadow -->
	<!--- @private -->
	<s:Rect id="shadow" left="-1" right="-1" top="-1" bottom="-1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" 
								 color.down="0xFFFFFF"
								 alpha="0.01"
								 alpha.down="0" />
				<s:GradientEntry color="0x000000" 
								 color.down="0xFFFFFF" 
								 alpha="0.07"
								 alpha.down="0.5" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 2: fill -->
	<!--- @private -->
	<s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF" 
								 color.over="0xBBBDBD" 
								 color.down="0xAAAAAA" 
								 alpha="0.85" />
				<s:GradientEntry color="0xD8D8D8" 
								 color.over="0x9FA0A1" 
								 color.down="0x929496" 
								 alpha="0.85" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 3: fill lowlight -->
	<!--- @private -->
	<s:Rect id="lowlight" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="270">
				<s:GradientEntry color="0x000000" ratio="0.0" alpha="0.0627" />
				<s:GradientEntry color="0x000000" ratio="0.48" alpha="0.0099" />
				<s:GradientEntry color="0x000000" ratio="0.48001" alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 4: fill highlight -->
	<!--- @private -->
	<s:Rect id="highlight" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.0"
								 alpha="0.33" 
								 alpha.over="0.22" 
								 alpha.down="0.12"/>
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.48"
								 alpha="0.33"
								 alpha.over="0.22"
								 alpha.down="0.12" />
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.48001"
								 alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" 
								 alpha="0.5625"
								 alpha.down="0.6375" />
				<s:GradientEntry color="0x000000" 
								 alpha="0.75" 
								 alpha.down="0.85" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Graphic id="gr"
			creationComplete="gr_creationComplete(event);"
			horizontalCenter="0" verticalCenter="0">
		<s:BitmapImage id="img" />
	</s:Graphic>
	
</s:SparkSkin>
